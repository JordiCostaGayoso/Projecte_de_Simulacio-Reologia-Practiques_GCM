import math as m
import numpy as np
import matplotlib.pyplot as plt
import figure_format_eloi
import stress_functions as stress
from scipy import integrate

def G( x, ptau, pbeta, pg0):
    return np.exp(-(x / ptau)**pbeta) * pg0
    

fig, axs = plt.subplots(2,1, figsize=(12,12), dpi=300)
ax1 = axs[0]
ax1.set_xlabel(r'$t$ (s)')
ax1.set_ylabel(r'$\sigma(t)$ (MPa)') 

ax2 = axs[1]
ax2.set_xlabel(r'$t$ (s)')
ax2.set_ylabel(r'$\epsilon(t)$ (%)')

plt.subplots_adjust(hspace=0.3)


dt = 1 
tA = 0
tB = 500 
tC = tB + 500
tD= tC + 1000
tE= tD + 1000
tF=tE+500
tG=tF+2000
t_inicial=[tA,tB,tC,tD,tE,tF,tG]
it_inicial=[int(t/dt) for t in t_inicial]

t=np.arange(1.,tG+dt,dt)
s = t*0
e = t*0
de = t*0

sigmaA = 200 
sigmaB = 300 
sigmaC = 100
sigmaD= 200
sigmaE=0

def funcio_sigma(pt,psigma0):
    return psigma0*np.sin(0.01*pt)
sigma0=200

def funcio_sigma2(pt,psigma0):
    return psigma0*pt

creep=[sigmaA,sigmaB,0,0,sigmaD,sigmaE]
ifunc_sigma=[0,0,1,2,0,0]

tau = 1600 
beta = 0.487
G0 = 40000

for k in range(len(it_inicial)-1):
    if ifunc_sigma[k]==0:
        for i in range(it_inicial[k],it_inicial[k+1]):
            f = 0.
            for j in range(i):
                f = f + G(t[i]-t[j], tau, beta, G0)*de[j]
                de[i]= (creep[k] - f) / stress.kww(dt, tau, beta, G0)
    if ifunc_sigma[k]==1:
        for i in range(it_inicial[k],it_inicial[k+1]):
            f = 0.
            for j in range(i):
                f = f + G(t[i]-t[j], tau, beta, G0)*de[j]
                de[i]= (funcio_sigma(t[i],sigma0) - f) / stress.kww(dt, tau, beta, G0)
    if ifunc_sigma[k]==2:
        for i in range(it_inicial[k],it_inicial[k+1]):
            f = 0.
            for j in range(i):
                f = f + G(t[i]-t[j], tau, beta, G0)*de[j]
                de[i]= (funcio_sigma2(t[i],0.1) - f) / stress.kww(dt, tau, beta, G0)

for i in np.arange(len(t)):
    tt = t[i]
    h = np.heaviside(t - tt, 0.)
    gt = np.multiply(h, t-tt) # tt1 = np.multiply(h1, t - t1)
    g = stress.kww(gt, tau, beta, G0) * de[i]
    ds = np.multiply(h, g)
    s = s + ds
    e[i] = np.sum(de[0:i])

ax1.plot(t, s, '--o', color='blue', fillstyle='full', markersize=5)
ax2.plot(t, e*100, '--o', color='red', fillstyle='full', markersize=5)
plt.show()
